package com.sdlc.pro.edj.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;
import org.springframework.transaction.interceptor.TransactionAspectSupport;
import org.springframework.transaction.support.AbstractPlatformTransactionManager;

@Entity
@Setter
@Getter
@ToString
@NoArgsConstructor
public class StudentEntity {
    //create table StudentEntity (id integer generated by default as identity, cgpa varchar(255), name varchar(255), primary key (id))
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;
    private String  name;
    private float cgpa;


    public StudentEntity(String name,  float cgpa) {
        this.name = name;
        this.cgpa = cgpa;
    }
}



package com.sdlc.pro.edj.config;

import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import javax.sql.DataSource;
import java.util.Properties;

@Configuration
@EnableTransactionManagement
@EnableJpaRepositories(
       
)
public class PgsqlDatabaseConfig{
    @Bean
    @ConfigurationProperties(prefix = "pgsql.datasource")
    public DataSource pgsqlDataSourc(){
        return DataSourceBuilder
                .create()
                .build();
    }
    @Bean("pgsqlEntityManagerFactory")
    public LocalContainerEntityManagerFactoryBean pgsqlEntityManagerFactory(){
        var factory=new LocalContainerEntityManagerFactoryBean();
         factory.setPersistenceUnitName("pgsql-unit");
          factory.setDataSource(pgsqlDataSourc());

          factory.setPackagesToScan("com.sdlc.pro.edj.entity");
          var vendorAdapter=new HibernateJpaVendorAdapter();
          vendorAdapter.setShowSql(true);
          factory.setJpaVendorAdapter(vendorAdapter);
          var props=new Properties();
          props.setProperty("hibernate.hbm2ddl.auto","update");
          props.setProperty("hibernate.format_sql","true");
          factory.setJpaProperties(props);
        return factory;
    }
    @Bean("pgsqlTransactionManager")
    public PlatformTransactionManager pgsqlTransactionManager(EntityManagerFactory pgsqlEntityManagerFactory){
        var manager=new JpaTransactionManager();
        manager.setEntityManagerFactory(pgsqlEntityManagerFactory);
        return manager;
    }
}



package com.sdlc.pro.edj.repository;

import com.sdlc.pro.edj.entity.StudentEntity;
import jakarta.persistence.EntityManager;
import jakarta.persistence.PersistenceContext;
import org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration;
import org.springframework.data.domain.Example;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;
import org.springframework.data.domain.Sort;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.repository.query.FluentQuery;
import org.springframework.orm.jpa.vendor.HibernateJpaDialect;
import org.springframework.stereotype.Repository;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.transaction.interceptor.TransactionInterceptor;

import javax.swing.text.html.parser.Entity;
import java.util.List;
import java.util.Optional;
import java.util.function.Function;

@Repository
public class PgsqlStudentRepository  {


    @PersistenceContext(unitName = "pgsql-unit")
    private EntityManager entityManager;

    public List<StudentEntity> findAll(){
        return entityManager.createQuery("select s from StudentEntity s",StudentEntity.class)
                .getResultList();

    }

    public Optional<StudentEntity>findById(Integer id){
        return Optional.ofNullable(this.entityManager.find(StudentEntity.class,id));
    }
    @Transactional
    public  void save(StudentEntity student){
        entityManager.persist(student);
    }



}
