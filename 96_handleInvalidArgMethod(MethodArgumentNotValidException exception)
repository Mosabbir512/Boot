package com.sdle.pro1.eosb.model;

import com.fasterxml.jackson.annotation.JsonAnySetter;
import com.sdle.pro1.eosb.annotation.BdPhoneNumber;
import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import lombok.AllArgsConstructor;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import org.hibernate.validator.constraints.Range;

@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
public class Student{
      @Positive
      private int id;
      @NotBlank(message = "name can't be blank bro!")
      private String name;
      @Range(min = 3,max = 30)
      private int age;
      @Positive
      private float cgpa;
      @Email(message = "Email is not formatted bro!")
      private String email;
      @BdPhoneNumber
     // @Pattern(regexp = "(\\+88)?01[3-9]\\d{8}",message = "found Invalied Bangladeshi Phone Number")
      private String phone;
      @Valid
      @NotNull
      private Address address;
}






@RestControllerAdvice
public class GlobalRestExceptionHandler {
    @Autowired
    private ErrorAttributes errorAttributes;
    @ExceptionHandler(MethodArgumentNotValidException.class)
    public ResponseEntity<?> handleInvalidArgMethod(MethodArgumentNotValidException exception){
       List<FieldError>fieldErrors=exception.getFieldErrors();
       Map<String,Object>errors= fieldErrors.stream().collect(Collectors.toMap(e->e.getField(),e->e.getDefaultMessage()));

        return ResponseEntity.status(HttpStatus.BAD_REQUEST)
                .body(Map.of(
                        "errror",HttpStatus.BAD_REQUEST,
                        "meessate","found error fields for student obj",
                        "errors",errors
                ));
    }
}
