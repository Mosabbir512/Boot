package com.sdlc.pro.edj.entity;

import jakarta.persistence.Entity;
import jakarta.persistence.GeneratedValue;
import jakarta.persistence.GenerationType;
import jakarta.persistence.Id;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;

@Entity
@Setter
@Getter
@NoArgsConstructor
public class StudentEntity {
    //create table StudentEntity (id integer generated by default as identity, cgpa varchar(255), name varchar(255), primary key (id))
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;
    private String  name;
    private String cgpa;

    public StudentEntity(String name, String cgpa) {
        this.name = name;
        this.cgpa = cgpa;
    }
}




package com.sdlc.pro.edj;


import com.sdlc.pro.edj.entity.StudentEntity;
import jakarta.persistence.*;
import jakarta.persistence.spi.ClassTransformer;
import jakarta.persistence.spi.PersistenceProvider;
import jakarta.persistence.spi.PersistenceUnitInfo;
import jakarta.persistence.spi.PersistenceUnitTransactionType;
import org.hibernate.jpa.HibernatePersistenceProvider;
import org.hibernate.resource.transaction.backend.jdbc.internal.JdbcIsolationDelegate;
import org.springframework.boot.jdbc.DataSourceBuilder;

import javax.sql.DataSource;
import java.io.PrintWriter;
import java.net.URL;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.SQLException;
import java.sql.SQLFeatureNotSupportedException;
import java.util.List;
import java.util.Map;
import java.util.Properties;
import java.util.logging.Logger;

class SdlcProDataSource implements DataSource{

	@Override
	public Connection getConnection() throws SQLException {
		Connection connection= DriverManager.getConnection(
				"jdbc:postgresql://localhost:5432/eosb_data_jpa",
				"postgres",
				"postgres");
		return connection;
	}

	@Override
	public Connection getConnection(String username, String password) throws SQLException {
		return null;
	}

	@Override
	public PrintWriter getLogWriter() throws SQLException {
		return null;
	}

	@Override
	public void setLogWriter(PrintWriter out) throws SQLException {

	}

	@Override
	public void setLoginTimeout(int seconds) throws SQLException {

	}

	@Override
	public int getLoginTimeout() throws SQLException {
		return 0;
	}

	@Override
	public Logger getParentLogger() throws SQLFeatureNotSupportedException {
		return null;
	}

	@Override
	public <T> T unwrap(Class<T> iface) throws SQLException {
		return null;
	}

	@Override
	public boolean isWrapperFor(Class<?> iface) throws SQLException {
		return false;
	}
}
class  SdlcProUnitInfo implements PersistenceUnitInfo {

	@Override
	public String getPersistenceUnitName() {
		return "default";
	}

	@Override
	public String getPersistenceProviderClassName() {
		return "jakarta.persistence.spi.HibernatePersistenceProvider";
	}

	@Override
	public PersistenceUnitTransactionType getTransactionType() {
		return PersistenceUnitTransactionType.RESOURCE_LOCAL;
	}

	@Override
	public DataSource getJtaDataSource() {
		return null;

	}

	@Override
	public DataSource getNonJtaDataSource() {
		return new SdlcProDataSource();

	}

	@Override
	public List<String> getMappingFileNames() {
		return null;
	}

	@Override
	public List<URL> getJarFileUrls() {
		return null;
	}

	@Override
	public URL getPersistenceUnitRootUrl() {
		return null;
	}

	@Override
	public List<String> getManagedClassNames() {
		return List.of("com.sdlc.pro.edj.entity.StudentEntity");
	}

	@Override
	public boolean excludeUnlistedClasses() {
		return false;
	}

	@Override
	public SharedCacheMode getSharedCacheMode() {
		return null;
	}

	@Override
	public ValidationMode getValidationMode() {
		return null;
	}

	@Override
	public Properties getProperties() {
		Properties props=new Properties();
		props.setProperty("hibernate.hbm2ddl.auto","update");
		props.setProperty("hibernate.show_sql","true");
		return props;
	}

	@Override
	public String getPersistenceXMLSchemaVersion() {
		return null;
	}

	@Override
	public ClassLoader getClassLoader() {
		return null;
	}

	@Override
	public void addTransformer(ClassTransformer classTransformer) {

	}

	@Override
	public ClassLoader getNewTempClassLoader() {
		return null;
	}
}

public class EsobDataJpaApplication {

	public static void main(String[] args) throws Exception{
		SdlcProUnitInfo info=new SdlcProUnitInfo();
		PersistenceProvider provider=new HibernatePersistenceProvider();
		EntityManagerFactory emf=provider.createContainerEntityManagerFactory(info, Map.of("hibernate.format_sql","true"));

		try(EntityManager em=emf.createEntityManager()){ // try with resource
		em.getTransaction().begin() ;
			var s = new StudentEntity("Rakib", "3.4");
			em.persist(s);
			em.getTransaction().commit();
			em.close();
		}
		System.out.println("vanila java!");
	}


}



/*
output:
create table StudentEntity (id integer generated by default as identity, cgpa varchar(255), name varchar(255), primary key (id))
     insert 
    into
        StudentEntity
        (cgpa, name) 
    values
        (?, ?) 
    returning id
*/
