
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Cricket Match</title>
    <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.7.1/jquery.min.js"></script>
</head>
<body>
<h1><span id="team1">_</span> VS <span id="team2">_</span> </h1>
<h1>Run: <span id="run">_</span> </h1>
<h1>Over: <span id="over">_</span></h1>
<h1>Wicket:<span id="wicket">_</span> </h1>

<br><br>
<h1><span id="team11">_</span> VS <span id="team22">_</span> </h1>
<h1><span id="goal1">_</span> : <span id="goal2">_</span> </h1>
<h1>time: <span id="time">_</span> </h1>

<script>
    function fetchMatchUpdate(){
        const eventSource=new EventSource("/get-match-update");

        eventSource.addEventListener("cricket_match",function (event){
            console.log(event);
            const data=JSON.parse(event.data);

            $("#team1").text(data['team1']);
            $("#team2").text(data['team2']);
            $("#run").text(data['run']);
            $("#over").text(data['over']);
            $("#wicket").text(data['wicket']);
        });

        eventSource.addEventListener("football_match",function (event){
            console.log(event);
            console.log(event.data);
            const data=JSON.parse(event.data);

            $("#team11").text(data['team1']);
            $("#team22").text(data['team2']);
            $("#goal1").text(data['goal1']);
            $("#goal2").text(data['goal2']);
            $("#time").text(data['time']);

        });
    }
    fetchMatchUpdate();
</script>
</body>
</html>



package com.sdle.pro1.eosb.model;
public record MatchInfo (String team1,String team2,int run,float over,int wicket){
}

package com.sdle.pro1.eosb.model;
public record FootballMatchInfo(String team1,String team2,int goal1,int goal2,double time) {
}


package com.sdle.pro1.eosb.event;
import com.sdle.pro1.eosb.model.FootballMatchInfo;
import lombok.Getter;
import org.springframework.context.ApplicationEvent;

@Getter
public class FootballMatchPudateEvent extends ApplicationEvent {
    private FootballMatchInfo info;

    public FootballMatchPudateEvent(Object source,FootballMatchInfo info) {
        super(source);
        this.info=info;
    }
}


package com.sdle.pro1.eosb.event;
import com.sdle.pro1.eosb.model.MatchInfo;
import lombok.Getter;
import org.springframework.context.ApplicationEvent;

@Getter
public class CricketMatchUpdateEvent extends ApplicationEvent {
    private MatchInfo matchInfo;
    public CricketMatchUpdateEvent(Object source,MatchInfo matchInfo) {
        super(source);
        this.matchInfo=matchInfo;
    }
}


package com.sdle.pro1.eosb.handler;
import com.sdle.pro1.eosb.event.CricketMatchUpdateEvent;
import com.sdle.pro1.eosb.event.FootballMatchPudateEvent;
import com.sdle.pro1.eosb.model.FootballMatchInfo;
import org.springframework.context.event.EventListener;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.mvc.method.annotation.SseEmitter;
import java.util.Set;
import java.util.concurrent.CopyOnWriteArraySet;

@Component
public class MatchEventHandler {
    private final Set<SseEmitter> sseEmitters=new CopyOnWriteArraySet<>();
    public SseEmitter subcribe(){
        SseEmitter emitter=new SseEmitter((long) Integer.MAX_VALUE);
        emitter.onError(err->sseEmitters.remove(emitter));
        emitter.onTimeout(()->sseEmitters.remove(emitter));
        emitter.onCompletion(()->sseEmitters.remove(emitter));
        sseEmitters.add(emitter);
        return emitter;
    }
    @Async
    @EventListener(CricketMatchUpdateEvent.class)
    public void cricketMatchUpdate(CricketMatchUpdateEvent event){
       sendData("cricket_match",event.getMatchInfo());
    }

    @Async
    @EventListener(FootballMatchPudateEvent.class)
    public void footballMatchUpdate(FootballMatchPudateEvent event){
       sendData("football_match",event.getInfo());
    }
    private void sendData(String eventName,Object data){
        for(SseEmitter emitter:sseEmitters){
            try {
                var eventBuilder=SseEmitter.event().
                        name(eventName)
                        .data(data);
                emitter.send(eventBuilder);
            }
            catch (Exception ex){
                ex.printStackTrace();
            }
        }
    }
}



package com.sdle.pro1.eosb.contorller;
import com.sdlc.pro.analytics.compute.MyCompute;
import com.sdle.pro1.eosb.event.CricketMatchUpdateEvent;
import com.sdle.pro1.eosb.event.FootballMatchPudateEvent;
import com.sdle.pro1.eosb.handler.MatchEventHandler;
import com.sdle.pro1.eosb.model.FootballMatchInfo;
import com.sdle.pro1.eosb.model.MatchInfo;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import org.apache.catalina.Executor;
import org.apache.catalina.core.ApplicationFilterChain;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationEventPublisher;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.servlet.mvc.method.annotation.SseEmitter;
import java.io.IOException;
import java.util.Set;
import java.util.concurrent.CopyOnWriteArraySet;
import java.util.concurrent.Executors;
import java.util.function.Consumer;


@Controller
public class AppController {
    @Autowired
    private MyCompute myCompute;
    @Autowired
    private MatchEventHandler matcheventHandler;
    @Autowired
    private ApplicationEventPublisher publisher;

    @GetMapping("/cricket-match")
    public String cricketMatch(){
        return "cricket_match";
    }

    @GetMapping("/get-match-update")
    public SseEmitter progressBar(HttpServletResponse response) throws IOException {
        return matcheventHandler.subcribe();
    }

    @ResponseStatus(HttpStatus.OK)
    @PostMapping("/update-cricket-match-data")
    public void updateMatchData(@RequestBody MatchInfo info){
         var event=new CricketMatchUpdateEvent(this,info);
         publisher.publishEvent(event);

    }

    @ResponseStatus(HttpStatus.OK)
    @PostMapping("/update-football-match-data")
    public void updateMatchData(@RequestBody FootballMatchInfo info){
        var event=new FootballMatchPudateEvent(this,info);
        publisher.publishEvent(event);
    }


}




