/// for dependency run==install



<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-starter-parent</artifactId>
        <version>3.2.5</version>
    <relativePath/>  <!--        lookup parent form repository-->
    </parent>

    <packaging>jar</packaging>

    <groupId>com.sdlc.pro.analytics</groupId>
    <artifactId>analytics-tool</artifactId>
    <version>1.0.0</version>

    <properties>
        <maven.compiler.source>18</maven.compiler.source>
        <maven.compiler.target>18</maven.compiler.target>
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    </properties>

    <dependencies>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-web</artifactId>
<!--            <version>3.2.5</version>-->
        </dependency>
        <dependency>
            <groupId>org.springframework.boot</groupId>
            <artifactId>spring-boot-starter-thymeleaf</artifactId>
<!--            <version>3.2.5</version>-->
        </dependency>
        <dependency>
            <groupId>org.projectlombok</groupId>
            <artifactId>lombok</artifactId>
<!--            <version>1.18.32</version>-->
        </dependency>
    </dependencies>

</project>



package com.sdlc.pro.analytics.autoconfig;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.SpringBootConfiguration;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;

@Configuration
@ComponentScan(basePackages = "com.sdlc.pro.analytics")
public class AnalyticToolAutoconfiguration {

}



package com.sdlc.pro.analytics.controller;


import com.sdlc.pro.analytics.model.RequestTracker;
import com.sdlc.pro.analytics.repository.RequestRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import java.util.List;
@Controller
@RequestMapping("/analytics")
public class DashboardController {

    @Autowired
    private RequestRepository requestrepository;

    @GetMapping("/dashboard")
    public String dashboard(){
        return "dashboard";
    }

    @ResponseBody
    @GetMapping("/request-stat")
    public List<RequestTracker> stats(){
        return requestrepository.getTrackers();
    }
}


package com.sdlc.pro.analytics.interceptor;

import com.sdlc.pro.analytics.model.RequestTracker;
import com.sdlc.pro.analytics.repository.RequestRepository;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.servlet.http.HttpServletResponse;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.web.servlet.HandlerInterceptor;
import org.springframework.web.servlet.ModelAndView;

import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;

@Slf4j
@Component
public class AnalyticInterceptor implements HandlerInterceptor {
    @Autowired
    private RequestRepository requestRepository;

    private  static final SimpleDateFormat format=new SimpleDateFormat("dd-MM-yyy hh:mm:ss a");
    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
        long st=System.currentTimeMillis();
        request.setAttribute("start_time",st);
        return true;
    }

    private final List<String> skipUrls=List.of(
            "/analytics/request-stat",
            "/analytics/dashboard"
    );
    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
        if(modelAndView !=null) {
            request.setAttribute("page_name", modelAndView.getViewName());
        }
    }

    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
        if(skipUrls.stream().anyMatch(u->u.equals(request.getRequestURI()))){
            return ;
        }
        long st= (long) request.getAttribute("start_time");
        long et=System.currentTimeMillis();
        String time= format.format(new Date(st));
        var tracker=new RequestTracker(
                request.getRemoteAddr(),
                request.getMethod(),
                request.getRequestURI(),
                (String) request.getAttribute("page_name"),
                time,
                Thread.currentThread().getName(),
                (st-et)
        );
        requestRepository.addRequestTracker(tracker);

    }
}





package com.sdlc.pro.analytics.model;

/*
{
        ip: String,
        method: String ,
        path: String,
        pageName: String ,
        time: String ,
        thread: String ,
        consumedTime: long
}
 */
public record RequestTracker(String ip,String method,String path,String pageName,String time,String thread,long consumedTime) {
}




package com.sdlc.pro.analytics.repository;

import com.sdlc.pro.analytics.model.RequestTracker;
import org.springframework.stereotype.Component;

import java.util.List;
import java.util.concurrent.CopyOnWriteArrayList;

@Component
public class RequestRepository {
    private final List<RequestTracker> trackers=new CopyOnWriteArrayList<>();
    public void addRequestTracker(RequestTracker tracker){
        trackers.add(tracker);
    }
    public List<RequestTracker> getTrackers(){
        return List.copyOf(trackers);
    }
}




package com.sdlc.pro.analytics.config;


import com.sdlc.pro.analytics.interceptor.AnalyticInterceptor;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Configuration;
import org.springframework.web.servlet.config.annotation.InterceptorRegistry;
import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;

@Configuration
public class WebConfig implements WebMvcConfigurer {
   @Autowired
   private AnalyticInterceptor analyticInterceptor;

    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(analyticInterceptor).addPathPatterns("/**");
    }
}


