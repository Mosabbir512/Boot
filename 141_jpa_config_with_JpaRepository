

@Repository
public interface PgsqlStudentRepository extends JpaRepository<StudentEntity,Integer> {


}




package com.sdlc.pro.edj.config;

import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import org.springframework.boot.context.properties.ConfigurationProperties;
import org.springframework.boot.jdbc.DataSourceBuilder;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.jdbc.datasource.embedded.EmbeddedDatabaseBuilder;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
import org.springframework.transaction.PlatformTransactionManager;
import org.springframework.transaction.annotation.EnableTransactionManagement;

import javax.sql.DataSource;
import java.util.Properties;

@Configuration
@EnableTransactionManagement
@EnableJpaRepositories(
        basePackages = "com.sdlc.pro.edj.repository",
        entityManagerFactoryRef = "pgsqlEntityManagerFactory",
        transactionManagerRef = "pgsqlTransactionManager"
)
public class PgsqlDatabaseConfig{
    @Bean
    @ConfigurationProperties(prefix = "pgsql.datasource")
    public DataSource pgsqlDataSourc(){
        return DataSourceBuilder
                .create()
                .build();
    }
    @Bean("pgsqlEntityManagerFactory")
    public LocalContainerEntityManagerFactoryBean pgsqlEntityManagerFactory(){
        var factory=new LocalContainerEntityManagerFactoryBean();
         factory.setPersistenceUnitName("pgsql-unit");
          factory.setDataSource(pgsqlDataSourc());

          factory.setPackagesToScan("com.sdlc.pro.edj.entity");
          var vendorAdapter=new HibernateJpaVendorAdapter();
          vendorAdapter.setShowSql(true);
          factory.setJpaVendorAdapter(vendorAdapter);
          var props=new Properties();
          props.setProperty("hibernate.hbm2ddl.auto","update");
          props.setProperty("hibernate.format_sql","true");
          factory.setJpaProperties(props);
        return factory;
    }
    @Bean("pgsqlTransactionManager")
    public PlatformTransactionManager pgsqlTransactionManager(EntityManagerFactory pgsqlEntityManagerFactory){
        var manager=new JpaTransactionManager();
        manager.setEntityManagerFactory(pgsqlEntityManagerFactory);
        return manager;
    }
}



@SpringBootApplication(
        exclude = {
                DataSourceAutoConfiguration.class,
                HibernateJpaAutoConfiguration.class,
                TransactionAutoConfiguration.class,
                JpaRepositoriesAutoConfiguration.class
        }
)
public class EsobDataJpaApplication implements CommandLineRunner {

	@Autowired
	private PgsqlStudentRepository pgsqlStudentRepository;

	@Override
	public void run(String... args) throws Exception {
		pgsqlStudentRepository.save(new StudentEntity("rtrakib",4.50f));
	//	var list=pgsqlStudentRepository.findAll();
	//	list.forEach(System.out::println);

	}

	public static void main(String[] args) throws Exception {
        SpringApplication.run(EsobDataJpaApplication.class,args);
		/*
		SdlcProUnitInfo info=new SdlcProUnitInfo();
		PersistenceProvider provider=new HibernatePersistenceProvider();
		EntityManagerFactory emf=provider.createContainerEntityManagerFactory(info, Map.of("hibernate.format_sql","true"));

		try(EntityManager em=emf.createEntityManager()){ // try with resource
		em.getTransaction().begin() ;
			var s = new StudentEntity("Rakib", "3.4");
			em.persist(s);
			em.getTransaction().commit();
			em.close();
		}
		System.out.println("vanila java!");

		 */
	}


}
