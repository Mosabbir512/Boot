
//Observer design Pattern

package com.sdle.pro1.eosb;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

class Observable{
	Map<String,List<Observer>> map=new HashMap<>();

	public void subscriber(String subject,Observer observer){
		List<Observer>list=map.get(subject);
		if(list==null){
			list=new ArrayList<>();
			map.put(subject,list);
		}
		list.add(observer);
	}

	public void publish(String subject,String information){
         for(Observer observer:map.get(subject)){
			 observer.info(information);
		 }
	}

}
interface Observer{
	void info(String information);
}

public class EngineeringOnSpringbootApplication {
	public static void main(String[] args) throws InterruptedException {
		//ApplicationContext context=SpringApplication.run(EngineeringOnSpringbootApplication.class, args);
		//ConfigurableApplicationContext context=new AnnotationConfigApplicationContext(EngineeringOnSpringbootApplication.class);

		Observable observable=new Observable();
		Observer stu1=new Observer() {
			@Override
			public void info(String information) {
				System.out.println("stu1 :" +information);
			}
		};
		Observer stu2=(info)-> System.out.println("stu2 :"+info);
		Observer stu3=(info)-> System.out.println("stu3 :"+info);
		Observer stu4=(info)-> System.out.println("stu4 :"+info);

		observable.subscriber("springboot",stu1);
		observable.subscriber("sqa",stu3);
		observable.subscriber("sqa",stu2);
		observable.subscriber("springboot",stu4);

		observable.publish("sqa","ajke rate 10.00pm spring boot class ache");


	}
}

