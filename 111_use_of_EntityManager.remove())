
package com.sdlc.pro.edj.entity;

import jakarta.persistence.*;
import lombok.*;
@Entity
@Table(name = "student_table")
@Setter
@Getter
@AllArgsConstructor
@NoArgsConstructor
@ToString
public class StudentEntity {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;
    private String name;
    private Float cgpa;
}



package com.sdlc.pro.edj.dao;
import com.sdlc.pro.edj.entity.StudentEntity;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Query;
import org.springframework.stereotype.Repository;

import java.util.List;
@Repository
public interface  StudentDao extends JpaRepository<StudentEntity,Integer>{
    @Query("select s from StudentEntity s where s.id=?1")
    List<StudentEntity> getAll();

}




package com.sdlc.pro.edj;
import com.sdlc.pro.edj.entity.StudentEntity;
import jakarta.persistence.EntityManager;
import jakarta.persistence.EntityManagerFactory;
import jakarta.persistence.Persistence;


import java.util.function.Consumer;

public class EsobDataJpaApplication {
	final  static EntityManagerFactory emf=Persistence.createEntityManagerFactory("postgres_unit");
	static final EntityManager em=emf.createEntityManager();

	public static void main(String[] args) throws Exception{
		var s2=new StudentEntity(9,"raju",3.33f);
    transational((em)->{


    var s= em.find(StudentEntity.class,8);
	if(em.contains(s)){
		em.remove(s);
	}
    });
	}

 
	static void transational(Consumer<EntityManager> consumer){
		em.getTransaction().begin();//before advice
		try {
			consumer.accept(em);
		}
		catch (Exception ex){
          em.getTransaction().rollback();
		  throw new RuntimeException("can't save object");
		}
		em.getTransaction().commit();//after advice
		em.close();
	}
}
