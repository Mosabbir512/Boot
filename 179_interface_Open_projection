package com.sdlc.pro.edj.entity;

import jakarta.persistence.*;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@Table(indexes = {
        @Index(name = "price_index",columnList = "price"),
        @Index(name = "id_and_price_index",columnList = "id, price")
})
@Entity
@Setter
@ToString
@Getter
@NoArgsConstructor
public class Product {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;
    private String name;
    private Double price;
    private String categoryName;

    @Version
    private Long version;
    @ManyToOne
    private Category category;

    public Product(Integer id, String name, Double price, String categoryName) {
        this.id = id;
        this.name = name;
        this.price = price;
        this.categoryName = categoryName;
    }
}package com.sdlc.pro.edj.projection;

import org.springframework.beans.factory.annotation.Value;


public interface ProductNamePriceCategoryProjection {
    String getName();
    Double getPrice();
    CategoryNameProjection getCategory();
    interface CategoryNameProjection{
        String getName();
    }
    
    @Value("Product[name=#{target.name} ,price=#{target.price} ,cat_name=#{target.category.name}]")
    String toStringValue();    //  this is not a property of Product or category  // for this known open projection
}




package com.sdlc.pro.edj.repository;

import com.sdlc.pro.edj.dto.ProductDTO;
import com.sdlc.pro.edj.dto.ProductIdNamePriceDTO;
import com.sdlc.pro.edj.dto.ProductNamePriceDTO;
import com.sdlc.pro.edj.entity.Product;

import com.sdlc.pro.edj.projection.ProductIdNamePriceProjection;
import com.sdlc.pro.edj.projection.ProductNamePriceCategoryProjection;
import org.springframework.data.domain.*;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.data.jpa.repository.Lock;
import org.springframework.data.jpa.repository.Query;

import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public interface ProductRepository extends JpaRepository<Product,Integer> {
    Window<Product>findProductsByCategory_NameInOrderById(List<String> category,ScrollPosition position,Limit limit,Sort sort);
   @Query("""
            select p from Product p 
            where lower(p.name) like lower(concat('%',?1,'%')) 
            or lower(p.category.name) like lower(concat('%',?1,'%')) 
            """)
    Page<Product> findProductsByFilter(String searchValue,Pageable pageable);   // when  api call hobe then aita call hobe


  
   <T> T findProductById(Integer id,Class<T>clazz);


}





package com.sdlc.pro.edj;


import com.sdlc.pro.edj.entity.Product;
import com.sdlc.pro.edj.projection.ProductIdNamePriceProjection;
import com.sdlc.pro.edj.projection.ProductNamePriceCategoryProjection;
import com.sdlc.pro.edj.repository.PgsqlStudentRepository;
import com.sdlc.pro.edj.repository.ProductRepository;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Qualifier;
import org.springframework.boot.CommandLineRunner;
import org.springframework.boot.SpringApplication;

import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration;
import org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration;
import org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration;
import org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration;

import org.springframework.transaction.annotation.Transactional;

@SpringBootApplication(
        exclude = {
                DataSourceAutoConfiguration.class,
                HibernateJpaAutoConfiguration.class,
                TransactionAutoConfiguration.class,
                JpaRepositoriesAutoConfiguration.class
        }
)
public class EsobDataJpaApplication implements CommandLineRunner {


	@Autowired
    private PgsqlStudentRepository pgsqlStudentRepository;

	@Autowired
	private ProductRepository productRepository;


	@Override
	@Transactional
	public void run(String... args) throws Exception {

		var product = productRepository.findProductById(2, ProductNamePriceCategoryProjection.class);
		System.out.println(product.toStringValue());

		System.out.println(product.getName()+" "+product.getPrice());
	}

	public static void main(String[] args) throws Exception {
        SpringApplication.run(EsobDataJpaApplication.class,args);
		/*
		SdlcProUnitInfo info=new SdlcProUnitInfo();
		PersistenceProvider provider=new HibernatePersistenceProvider();
		EntityManagerFactory emf=provider.createContainerEntityManagerFactory(info, Map.of("hibernate.format_sql","true"));

		try(EntityManager em=emf.createEntityManager()){ // try with resource
		em.getTransaction().begin() ;
			var s = new StudentEntity("Rakib", "3.4");
			em.persist(s);
			em.getTransaction().commit();
			em.close();
		}
		System.out.println("vanila java!");

		 */
	}
}





/*

output:

Hibernate: 
    select
        p1_0.name,
        p1_0.price,
        c1_0.id,
        c1_0.name 
    from
        Product p1_0 
    left join
        Category c1_0 
            on c1_0.id=p1_0.category_id 
    where
        p1_0.id=?
2024-12-07T11:02:48.319+06:00 TRACE 5372 --- [           main] org.hibernate.orm.jdbc.bind              : binding parameter (1:INTEGER) <- [2]
Product[name=SAMSUNG Phone Ultra s9 ,price=90000.0 ,cat_name=S_PHONE]
SAMSUNG Phone Ultra s9 90000.0

*/





